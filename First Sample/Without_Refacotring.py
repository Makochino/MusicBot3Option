import discord
from discord.ext import commands
from discord import app_commands
import yt_dlp as youtube_dl
import asyncio
import os
import tempfile

from Projects.Bots.GpoDIr.gpo_bot import client

TOKEN = os.getenv("Discord_Token")
PREFIX = '.'

intents = discord.Intents.default()
intents.message_content = True
intents.messages = True
intents.guilds = True
intents.voice_states = True

bot = commands.Bot(command_prefix=PREFIX, intents=intents)

ytdl_format_options = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'quiet': True,
    'default_search': 'ytsearch',
    'extract_flat': False,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
}
ytdl = youtube_dl.YoutubeDL(ytdl_format_options)

FFMPEG_OPTIONS_STREAM = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
    'options': '-vn',
}
FFMPEG_OPTIONS_LOCAL = {
    'options': '-vn',
}

repeat_track = False
current_player = None
queue = []

@bot.event
async def on_message(message):
    await asyncio.sleep(30)
    try:
        await message.delete()
    except:
        pass
    await bot.process_commands(message)

async def delete_after(response, delay=30):
    try:
        await asyncio.sleep(delay)
        await response.delete()
    except:
        pass

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data=None, file_path=None):
        super().__init__(source)
        self.data = data
        self.file_path = file_path

    @classmethod
    async def from_query(cls, query, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()

        # TikTok
        if "tiktok.com" in query:
            try:
                temp_dir = tempfile.mkdtemp()
                ydl_opts = ytdl_format_options.copy()
                ydl_opts["outtmpl"] = os.path.join(temp_dir, "tiktok_audio.%(ext)s")
                with youtube_dl.YoutubeDL(ydl_opts) as tiktok_dl:
                    data = await loop.run_in_executor(None, lambda: tiktok_dl.extract_info(query, download=True))
                    filename = tiktok_dl.prepare_filename(data)
                # –ü–æ–∏—Å–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if not os.path.isfile(filename):
                    for file in os.listdir(temp_dir):
                        if file.startswith("tiktok_audio"):
                            filename = os.path.join(temp_dir, file)
                            break
                    else:
                        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ TikTok.")
                        return None
                return cls(discord.FFmpegPCMAudio(filename, **FFMPEG_OPTIONS_LOCAL), data=data, file_path=filename)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ TikTok: {e}")
                return None

        # YouTube
        try:
            data = await asyncio.wait_for(
                loop.run_in_executor(None, lambda: ytdl.extract_info(query, download=not stream)), timeout=10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return None

        if 'entries' in data:
            data = data['entries'][0]

        filename = data['url'] if stream else ytdl.prepare_filename(data)
        options = FFMPEG_OPTIONS_STREAM if stream else FFMPEG_OPTIONS_LOCAL
        return cls(discord.FFmpegPCMAudio(filename, **options), data=data, file_path=(None if stream else filename))

@bot.event
async def on_ready():
    print(f'–í–æ—à—ë–ª –∫–∞–∫ {bot.user.name}')
    try:
        synced = await bot.tree.sync()
        print(f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}')

def play_next_song(error):
    global repeat_track, current_player, queue
    if current_player is None or current_player.get('voice_client') is None:
        return
    voice_client = current_player['voice_client']

    if current_player['player'].file_path:
        try:
            os.remove(current_player['player'].file_path)
        except:
            pass

    if repeat_track and current_player:
        source = discord.FFmpegPCMAudio(current_player['player'].data['url'], **FFMPEG_OPTIONS_STREAM)
        player = YTDLSource(source, data=current_player['player'].data)
        current_player['player'] = player
        voice_client.play(player, after=play_next_song)
    elif queue:
        next_song = queue.pop(0)
        voice_client.play(next_song, after=play_next_song)
        current_player['player'] = next_song
    else:
        current_player = None

async def join_voice_channel(interaction):
    voice_client = interaction.guild.voice_client
    if not voice_client:
        if interaction.user.voice:
            try:
                voice_client = await interaction.user.voice.channel.connect(timeout=10)
            except Exception as e:
                msg = await interaction.response.send_message(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", ephemeral=True)
                await delete_after(msg)
                return None
        else:
            msg = await interaction.response.send_message("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
            await delete_after(msg)
            return None
    return voice_client

@bot.tree.command(name="–≤–∫–ª—é—á–∏—Ç—å", description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç—Ä–µ–∫–∞ (TikTok/YouTube)")
@app_commands.describe(query="–°—Å—ã–ª–∫–∞ –Ω–∞ TikTok/YouTube –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞")
async def music(interaction: discord.Interaction, query: str):
    global current_player, queue
    voice_client = await join_voice_channel(interaction)
    if voice_client is None:
        return
    await interaction.response.send_message(f"üîç –ü–æ–∏—Å–∫: {query}")
    async with interaction.channel.typing():
        player = await YTDLSource.from_query(query, stream="tiktok.com" not in query)
        if player is None:
            msg = await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫.")
            await delete_after(msg)
            return
        if voice_client.is_playing() or voice_client.is_paused():
            queue.append(player)
            msg = await interaction.followup.send(f"‚ûï –í –æ—á–µ—Ä–µ–¥—å: {player.data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            voice_client.play(player, after=play_next_song)
            current_player = {'voice_client': voice_client, 'player': player}
            msg = await interaction.followup.send(f"üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {player.data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        await delete_after(msg)

@bot.tree.command(name="—Å–∫–∏–ø", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def stop(interaction: discord.Interaction):
    voice_client = interaction.guild.voice_client
    if voice_client and voice_client.is_playing():
        if queue:
            next_title = queue[0].data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            msg = await interaction.response.send_message(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ. –°–µ–π—á–∞—Å –±—É–¥–µ—Ç: {next_title}")
        else:
            msg = await interaction.response.send_message("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ. –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        voice_client.stop()
    else:
        msg = await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.")
    await delete_after(msg)

@bot.tree.command(name="–ø–∞—É–∑–∞", description="–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –Ω–∞ –ø–∞—É–∑—É")
async def pause(interaction: discord.Interaction):
    voice_client = interaction.guild.voice_client
    if voice_client and voice_client.is_playing():
        voice_client.pause()
        msg = await interaction.response.send_message("‚è∏Ô∏è –ü–∞—É–∑–∞.")
    else:
        msg = await interaction.response.send_message("‚ùå –ù–µ—á–µ–≥–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É.")
    await delete_after(msg)

@bot.tree.command(name="–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
async def resume(interaction: discord.Interaction):
    voice_client = interaction.guild.voice_client
    if voice_client and voice_client.is_paused():
        voice_client.resume()
        msg = await interaction.response.send_message("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        msg = await interaction.response.send_message("‚ùå –ù–µ—á–µ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å.")
    await delete_after(msg)

@bot.tree.command(name="–æ—á–µ—Ä–µ–¥—å", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤")
async def show_queue(interaction: discord.Interaction):
    if queue:
        queue_titles = [player.data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for player in queue]
        msg = await interaction.response.send_message(f"üìÉ –û—á–µ—Ä–µ–¥—å:\n" + "\n".join(queue_titles))
    else:
        msg = await interaction.response.send_message("üà≥ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    await delete_after(msg)

@bot.tree.command(name="–ø–æ–≤—Ç–æ—Ä", description="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞")
async def repeat(interaction: discord.Interaction):
    global repeat_track
    repeat_track = not repeat_track
    status = "–≤–∫–ª—é—á–µ–Ω" if repeat_track else "–≤—ã–∫–ª—é—á–µ–Ω"
    msg = await interaction.response.send_message(f"üîÅ –ü–æ–≤—Ç–æ—Ä {status}.")
    await delete_after(msg)

@bot.tree.command(name="–≤—ã–π—Ç–∏", description="–í—ã–π—Ç–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
async def leave(interaction: discord.Interaction):
    voice_client = interaction.guild.voice_client
    if voice_client:
        await voice_client.disconnect()
        msg = await interaction.response.send_message("üëã –í—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    else:
        msg = await interaction.response.send_message("‚ùå –ù–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")
    await delete_after(msg)

client.run(TOKEN)
